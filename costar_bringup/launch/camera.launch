<launch>

  <arg name="handeye_output" default="screen"/>
  <arg name="table_frame" default="ar_marker_3"/>

  <!-- setup for two optional cameras -->
  <arg name="camera_id" default="#1" /> <!-- Use device_id such as 1d27/0601@4/14 for multiple primesense--> 
  <arg name="depth_registration" default="true" />
  <arg name="camera_name" default="camera" />
  <arg name="start_alvar" default="true" />

  <!-- ALVAR Parameters-->
  <arg name="marker_size" default="9.05" /> <!-- this is the correct marker size for the one on the end of the arm! -->
  <arg name="max_track_error" default="0.05" />
  <arg name="max_new_marker_error" default="0.02" />

  <include file="$(find openni2_launch)/launch/openni2.launch">
    <arg name="device_id" value="$(arg camera_id)" />
    <arg name="camera" value="$(arg camera_name)" />
    <arg name="depth_registration" value="$(arg depth_registration)" />
  </include>

  <!-- Launching ar tag program #2-->
  <group ns="$(arg camera_name)">
    <arg name="cam_image_topic2" value="/$(arg camera_name)/depth_registered/points" />
    <arg name="cam_info_topic2" value="/$(arg camera_name)/rgb/camera_info" /> 
    <arg name="output_frame2" value="/$(arg camera_name)_rgb_optical_frame" />
    <node if="$(arg start_alvar)" name="ar_track_alvar_$(arg camera_name)" pkg="ar_track_alvar" type="individualMarkers" respawn="true" output="log" args="$(arg marker_size) $(arg max_new_marker_error) $(arg max_track_error) $(arg cam_image_topic2) $(arg cam_info_topic2) $(arg output_frame2)" />
  </group>

  <!-- publish preferred orientation -->
  <node name="preferred_orientation_publisher" type="static_transform_publisher" pkg="tf" args=" 0 0 0 0 0 -1.5708 base_link preferred_orientation 200"/>

  <!-- handeye calibration -->
  <node name="handeye_calibration_server" type="calibration_server.py" pkg="simple_handeye_calibration" output="$(arg handeye_output)">
    <param name="camera_marker" value="ar_marker_0"/>
    <param name="ee_marker" value="endpoint_marker"/>
    <param name="base_link" value="world"/>
    <param name="camera_link" value="camera_link"/>
  </node>

  <!-- moveit collision environment -->
  <!--roslaunch moveit_collision_environment collision_env.launch tableTF:=ar_marker_2-->
  <include file="$(find moveit_collision_environment)/launch/collision_env.launch">
    <arg name="tableTF" value="$(arg table_frame)"/>
    <arg name="file_extension" value="stl"/>
    <arg name="renewTable" value="false"/>
  </include>

</launch>
